<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." name="OpenCiRM" default="make-dist">
	<description>Open CiRM Services Build File</description>
    <property name="versionSuffix" value=""/> <!-- e.g. "beta" or "rc" -->
    <property name="build" value="classes"/>
    <property name="dist" value="dist"/>
    <property name="backup" value="backup"/>
    <property name="javadoc" value="javadoc"/>    
    <property name="jars" value="lib"/>
    <property name="debug" value="on"/>
    <property file="build_info.properties"/>	
    <property name="build.number" value="${majorVersion}.${minorVersion}.${revisionNumber}"/>

	<!-- classpath for compiling-->
	<path id="compile-classpath">
		<fileset dir="lib">
			<include name="**/*.jar" />
		</fileset>
		<pathelement path="${java.class.path}" />
	</path>
	
    <target name="init" description="Create build directories, cleanup old build files.">
		<mkdir dir="${build}"/>
		<delete includeemptydirs="true">
		  <fileset dir="${build}" includes="**/*"/>
		</delete>		
        <mkdir dir="${javadoc}"/>
		<delete includeemptydirs="true">
		  <fileset dir="${javadoc}" includes="**/*"/>
		</delete>		        
    </target>

    <target name="current-number" description="Show current build number.">
      <echo>Current build number:${build.number}</echo>
    </target>

    <target name="version-increment" description="Increment to next build number in the build_info.properties file.">
      <propertyfile  file="build_info.properties">
        <entry key="revisionNumber" type="int" operation="+" value="1"/>
      </propertyfile>
    </target>
    
	<target name="compile" depends="init" description="Compile all OpenCiRM classes in build directory.">
		<javac classpathref="compile-classpath" debug="${debug}" destdir="${build}" srcdir="src/java">
		</javac>
		<copy todir="${build}">
		    <fileset dir="src/java">
		        <include name="**/*.sparql"/>
		    </fileset>
		</copy>
	</target>
	
	<target name="docgen" depends="init" description="Generate JavaDocs for CiRM Serevices">
	    <javadoc sourcepath="src/java" destdir="${javadoc}" classpathref="compile-classpath"/>
	</target>
	
    <target name="make-dist" depends="compile" description="Create distribution deployment.">
        <mkdir dir="${dist}"/>
        <mkdir dir="${dist}/logs"/>
        <copy todir="${dist}/bin"><fileset dir="bin"/></copy>
        <copy todir="${dist}/conf">
            <fileset dir="conf">
                <exclude name="wrapper.conf"/>
            </fileset>
        </copy>
        <copy todir="${dist}/lib"><fileset dir="lib"/></copy>
        <copy todir="${dist}/classes">
            <fileset dir="${build}"/>
         </copy>
         <copy todir="${dist}/src">
            <fileset dir="src">
                <include name="html/**"/>
                <include name="javascript/**"/>
                <include name="resources/**"/>
                <include name="ontology/**"/>
            </fileset>
         </copy>
   </target>
   
   <target name="clean" description="Delete are temporary build files as well as the distribution directory.">
	    <delete dir="${build}" />
        <delete dir="${dist}"/>
        <delete dir="${javadoc}"/>
	</target>

  <!-- A release tag should be executed only once, when deploying to production.
   This is because it has a side effect to increment the version number for 
   the next release. Test deployments on the other hand can be tagged multiple
   times.
   
   There's no easy way to detect if the current version is already tagged because
   tagging creates a new changeset. This task will commit the tag, so one
   must make sure it is not called to inadvertantly commit other pending local changes
   
   TODO: this needs to be ported to GIT
  -->
  <target name="tag-release" depends="get-revision, version-increment" description="Tag the release in Mercurial.">
    <exec executable="hg">
      <arg value="tag"/>
      <arg value="v${build.number}"/>
    </exec>
    <exec executable="hg">
      <arg value="commit"/>
      <arg value="-m"/>
      <arg value="autocommit release tag"/>
    </exec>
    <!-- Auto-push right away. It's better to push separately after one
     makes sure that the deployment went ok and the servers are up and running,
     but production deployments are usually done late at night and I (Boris) often forget 
     to do the push. -->
    <exec executable="hg">
      <arg value="push"/>
      <arg value="-f"/>
      <arg value="-B"/>
      <arg value="rel"/>
    </exec>    
  </target>

  <!-- Add a test tag by appending "b" for beta to the current build number.
    This can be called many times for many test deployments. Tagging with the same
    identifier is forced in Mercurial.
    
    TODO: this needs to be ported to GIT
    -->
  <target name="tag-test" depends="get-revision" description="Tag a beta version to be deployed in test.">
    <exec executable="hg">
      <arg value="tag"/>
      <arg value="-f"/>
      <arg value="v${build.number}b"/>
    </exec>
  </target>

  <!--
  TODO: this needs to be ported to GIT
  -->
  <target name="get-revision" description="Get latest version number (changeset hash) from Mercurial.">
    <!-- get latest changeset id-->  
    <exec executable="hg" outputproperty="changesetid">
      <arg value="id"/>
      <arg value="-i"/>
    </exec>
    <condition property="hasChangedLocally">
      <contains string="${changesetid}" substring="+"/>
    </condition>
    <!-- get current bookmark branch - should be 'rel' -->
    <exec executable="hg" outputproperty="bookmarks">
      <arg value="id"/>
      <arg value="-B"/>
    </exec>
    <condition property="isReleaseBranch">
        <matches string="${bookmarks}" pattern=".*\brel\b.*"/>
    </condition>
    <echo message="Storing changeset id ${changesetid} in configuration files."/>
    <copy file="conf/testconfig.json.template" tofile="conf/testconfig.json" overwrite="true"/>
    <replace file="conf/testconfig.json" token="@changeset@" value="${changesetid}"/>
    <replace file="conf/testconfig.json" token="@version@" value="v${build.number}b"/>    
    <!-- this doesn't work full because of the SSL certificate s2030050 that appears in both places
      we need to insert the certificate filename somehow contextually...-->     
    <copy file="conf/prodconfig.json.template" tofile="conf/prodconfig.json" overwrite="true"/>
    <echo message="copied file"/>
    <replace file="conf/prodconfig.json" token="@changeset@" value="${changesetid}"/>
    <replace file="conf/prodconfig.json" token="@version@" value="v${build.number}"/>    
  </target>
  
  <target name="fail" depends="get-revision" if="hasChangedLocally" description="Conditional failure if there are uncommitted changes.">
    <fail message="Refusing to deploy, hasChangeLocally=${hasChangedLocally}, isReleaseBranch=${isReleaseBranch} - make sure you push first and you are using a release branch."/>
  </target>
</project>
